Deploying or Building an Existing Container
===========================================

.. Starting point for devs who are using Docker already and want to quickly
   get those apps into OpenShift. I'm not in love with the router stuff being
   here, but that's also not "advanced" either

Deploying from Docker Hub
-------------------------

The simplest way to get an existing image into OpenShift is to retrieve
the image from Docker Hub. OpenShift will automatically create a new
:term:`image stream` and map to the image in Docker Hub.

CLI Example
~~~~~~~~~~~

Create a new application in the current project, specifying the name of the
image in Docker Hub::

  $ oc new-app jdob/python-web

OpenShift will create a new image stream corresponding to the image::

  $ oc get is
  NAME         DOCKER REPO                                TAGS      UPDATED
  python-web   172.30.53.244:5000/python-web/python-web   latest    50 minutes ago

In the output above, the ``172.30.53.244`` address corresponds to the internal
Docker registry created and managed by the OpenShift installation. It runs
in a container under the ``default`` project, which can be accessed by a user
with cluster admin privileges::

  $ oc project default
  Now using project "default" on server "https://localhost:8443".

  $ oc get services
  NAME              CLUSTER-IP       EXTERNAL-IP   PORT(S)                   AGE
  docker-registry   172.30.53.244    <none>        5000/TCP                  20d
  kubernetes        172.30.0.1       <none>        443/TCP,53/UDP,53/TCP     20d
  router            172.30.198.186   <none>        80/TCP,443/TCP,1936/TCP   20d

More information about the created input stream can be viewed using the
``describe`` command::

  $ oc describe is python-web
  Name:             python-web
  Namespace:        python-web
  Created:          56 minutes ago
  Labels:           app=python-web
  Annotations:		openshift.io/generated-by=OpenShiftNewApp
                    openshift.io/image.dockerRepositoryCheck=2016-10-14T15:05:43Z
  Docker Pull Spec: 172.30.53.244:5000/python-web/python-web
  Unique Images:    1
  Tags:             1

  latest
    tagged from jdob/python-web

    * jdob/python-web@sha256:3f87be1825405ee8c7da23d7a6916090ecbb2d6e7b04fcd0fd1dc194173d2bc0
        56 minutes ago

The ``new-app`` command also created a few other artifacts related to the image.

A :term:`replication controller` is created to ensure a specified number of
pods for the image are running at a given time. The replication controller
automatically reacts to pods being deleted or crashing by creating new pods
with the same image and configuration. As with other resources, the list of
replication controllers can be viewed with the ``get`` command::

  $ oc get rc
  NAME           DESIRED   CURRENT   AGE
  python-web-1   1         1         1h

The next level up is the :term:`deployment configuration`, which is also
automatically generated by the ``new-app`` command. Details about the
deployment configuration can be viewed using the ``dc`` resource type to both
``get`` and ``describe``, and will include information on the replication
controller, details about the containers to be deployed such as the ports and
environment variables, and triggers that will automatically cause new pods to
be provisioned (such as when the image is updated).

The last layer of interest is the newly created :term:`service`. The service
functions as a load balancer and proxy to the underlying pods. Services are
assigned IP addresses and ports and will delegate requests to an appropriate
pod that can field it.

The list of services can be viewed using the ``get`` command::

  $ oc get services
  NAME         CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
  python-web   172.30.167.215   <none>        8080/TCP   1h

Details about a service include the internal IP address and ports in use::

  $ oc describe service python-web
  Name:             python-web
  Namespace:        python-web
  Labels:           app=python-web
  Selector:         app=python-web,deploymentconfig=python-web
  Type:             ClusterIP
  IP:               172.30.167.215
  Port    :         8080-tcp    8080/TCP
  Endpoints:        172.17.0.12:8080
  Session Affinity:	None
  No events.

It is important to realize that a :term:`route` to the service is not
automatically created::

  $ oc get routes

Routes must be explicitly created using the ``expose`` command.

.. TODO: add information on routes when I refactor this stuff out of here

UI Example
~~~~~~~~~~

.. TODO: Add UI screenshots

Building a Dockerfile in OpenShift
----------------------------------

Example
~~~~~~~

Exposing Your Application
-------------------------

Example
~~~~~~~
